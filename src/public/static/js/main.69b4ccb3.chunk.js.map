{"version":3,"sources":["components/welcome-screen.js","utils.js","components/dashboard-screen.js","App.js","serviceWorker.js","index.js"],"names":["sleep","interval","Promise","resolve","setTimeout","WelcomeScreen","displayMessage","msg","a","elem","document","getElementsByClassName","accumulator","i","length","console","log","innerText","props","done","this","className","Component","showSnackbar","snackbar","getElementById","innerHTML","DashboardScreen","onSearchChange","event","target","value","setState","searchValue","onResultChange","id","detailElem","JSON","stringify","state","data","responses","find","item","selectedItem","submit","parse","findIndex","URLSearchParams","append","fetch","method","body","then","catch","error","e","push","results","filter","includes","map","onClick","key","onChange","ref","App","isLoadingData","isLoadingWelcome","resp","json","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.69b4ccb3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nfunction sleep(interval) {\r\n  return new Promise((resolve) => setTimeout(resolve, interval));\r\n}\r\n\r\n\r\nclass WelcomeScreen extends Component {\r\ndisplayMessage = async(msg) => {\r\n        var elem = document.getElementsByClassName(\"welcome-message\")[0];\r\n        if (!elem) return;\r\n        let accumulator = \"\";\r\n        for (var i = 0; i < msg.length; i++) {\r\n          console.log(msg, msg.length);\r\n          accumulator += msg[i];\r\n          elem.innerText = accumulator;\r\n          await sleep(70);\r\n        }\r\n        await sleep(500);\r\n        if (this.props.done) this.props.done();\r\n      }\r\n  componentDidMount() {\r\n    const welcomeMsg = \"Welcome to rabbit coding... GVHD: Thầy Tuấn Anh ... Loading ...\";\r\n    this.displayMessage(welcomeMsg);\r\n  }\r\n  render() {\r\n    return <span className=\"welcome-message\"> </span>;\r\n  }\r\n}\r\nexport default WelcomeScreen;\r\n","export default function showSnackbar(msg) {\r\n  const snackbar = document.getElementById(\"snackbar\");\r\n  snackbar.innerHTML = msg;\r\n  snackbar.className = \"snackbar snackbar--show\";\r\n  setTimeout(() => (snackbar.className = \"snackbar--hide\"), 2000);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport showSnackbar from \"../utils\";\r\n\r\nclass DashboardScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let data = JSON.parse(JSON.stringify(this.props.data));\r\n    console.log(\"pre\", data);\r\n    let responses = [];\r\n    console.log(\"Run constructor\");\r\n    for (let item in data.responses) {\r\n      console.log(item);\r\n      data.responses[item].id = item;\r\n      responses.push(data.responses[item]);\r\n    }\r\n    data.responses = responses;\r\n\r\n    this.state = {\r\n      data: data,\r\n      selectedItem: null,\r\n      searchValue: \"\",\r\n    };\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    console.log(event.target.value);\r\n    this.setState({ searchValue: event.target.value });\r\n  };\r\n  onResultChange = (id) => {\r\n    this.detailElem.value = JSON.stringify(\r\n      this.state.data.responses.find((item) => item.id === id),\r\n      null,\r\n      \"\\t\"\r\n    );\r\n    this.setState({ selectedItem: id });\r\n    console.log(id);\r\n  };\r\n  submit = () => {\r\n    console.log(this.detailElem.value);\r\n    try {\r\n      const item = JSON.parse(this.detailElem.value);\r\n      console.log(item);\r\n      this.state.data.responses[\r\n        this.state.data.responses.findIndex((i) => i.id === item.id)\r\n      ] = item;\r\n      const data = new URLSearchParams();\r\n      data.append(\"data\", JSON.stringify(item));\r\n      fetch(\"/data\", {\r\n        method: \"POST\",\r\n        body: data,\r\n      })\r\n        .then(function (data) {\r\n          console.log(\"Request success: \", data);\r\n          showSnackbar(\"SUCCESS\");\r\n        })\r\n        .catch(function (error) {\r\n          console.log(\"Request failure: \", error);\r\n          showSnackbar(\"FAILED\");\r\n        });\r\n    } catch (e) {\r\n      console.log(\"input error\");\r\n      showSnackbar(\"CHECK YOUR INPUT\");\r\n      return;\r\n    }\r\n  };\r\n  render() {\r\n    let results = this.state.data.responses\r\n      .filter((item) => JSON.stringify(item).includes(this.state.searchValue))\r\n      .map((item) => (\r\n        <div\r\n          className={\r\n            item.id === this.state.selectedItem\r\n              ? \"dashboard__result dashboard__result--selected\"\r\n              : \"dashboard__result\"\r\n          }\r\n          onClick={() => this.onResultChange(item.id)}\r\n          key={item.id}\r\n        >\r\n          {item.id}\r\n        </div>\r\n      ));\r\n\r\n    return (\r\n      <div>\r\n        <div id=\"snackbar\" className=\"snackbar snackbar--hide\">SUCCESS</div>\r\n        <div className=\"curtain\"></div>\r\n        <div className=\"dashboard\">\r\n          <div className=\"dashboard__header\">\r\n            <div className=\"dashboard__header-section-1\">\r\n              <button className=\"dashboard__button\">Tìm kiếm</button>\r\n            </div>\r\n            <div className=\"dashboard__header-section-2\">\r\n              <input\r\n                onChange={(event) => this.onSearchChange(event)}\r\n                className=\"dashboard__input\"\r\n              ></input>\r\n            </div>\r\n          </div>\r\n          <div className=\"dashboard__body\">\r\n            <div className=\"dashboard__result-list\">{results}</div>\r\n            <div className=\"dashboard__toolbar\">\r\n              <div className=\"dashboard__toolbar-section\">\r\n                <button onClick={this.submit} className=\"dashboard__button\">\r\n                  Lưu\r\n                </button>\r\n              </div>\r\n              <div className=\"dashboard__toolbar-section\">\r\n                <button\r\n                  onClick={() => this.onResultChange(this.state.selectedItem)}\r\n                  className=\"dashboard__button\"\r\n                >\r\n                  Tải lại\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"dashboard__detail\">\r\n              <textarea\r\n                ref={(elem) => (this.detailElem = elem)}\r\n                className=\"dashboard__textarea\"\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DashboardScreen;\r\n","import React from \"react\";\nimport WelcomeScreen from \"./components/welcome-screen\";\nimport DashboardScreen from \"./components/dashboard-screen\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoadingData: true,\n    isLoadingWelcome: true,\n    data: null,\n  };\n  componentDidMount() {\n    fetch(\"/data\")\n      .then((resp) => resp.json())\n      .then((data) => {\n        console.log(data);\n        this.setState({ data: data, isLoadingData: false });\n      });\n  }\n  render() {\n    if (this.state.isLoadingWelcome || this.state.isLoadingData)\n      return (\n        <WelcomeScreen\n          done={() => this.setState({ isLoadingWelcome: false })}\n        ></WelcomeScreen>\n      );\n    return <DashboardScreen data={this.state.data} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}